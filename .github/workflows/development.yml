name: Auto Pull Request and Merge

on:
  push:
    branches:
      - development

jobs:
  merge_job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up PHP environment and other steps (if needed)...

      - name: Set PR title and body
        id: pr_info
        run: |
          # Generate dynamic title and body based on your requirements
          title="Auto-generated PR - $(date +%Y-%m-%d)"
          body="This is an automatically generated pull request from GitHub Actions. It was triggered on $(date +%Y-%m-%d) and contains some updates."
          echo ::set-output name=title::"$title"
          echo ::set-output name=body::"$body"

      - name: Create Pull Request
        id: create_pr
        run: |
          token="${{ secrets.TOKEN }}"  # Use your custom secret name here
          title="${{ steps.pr_info.outputs.title }}"  # Set the title dynamically
          body="${{ steps.pr_info.outputs.body }}"    # Set the body dynamically
          reviewers="masbekkk"  # Comma-separated list of reviewers
          base="main"  # The branch to merge into (main in this example)
          head=$(git rev-parse HEAD)  # The current commit SHA

          response=$(curl -X POST "https://api.github.com/repos/${{ github.repository }}/pulls" \
                      -H "Authorization: Bearer $token" \
                      -H "Accept: application/vnd.github.v3+json" \
                      -d "{\"title\":\"$title\",\"body\":\"$body\",\"base\":\"$base\",\"head\":\"$head\"}")

          pr_number=$(echo "$response" | jq -r '.number')
          echo "::set-output name=pull-request::$pr_number"

      - name: Wait for checks to pass
        id: wait_for_checks
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.TOKEN }}  # Use your custom secret name here
          script: |
            const prNumber = ${{ steps.create_pr.outputs.pull-request }};
            const interval = 10000; // 10 seconds
            let checksCompleted = false;

            const checkStatus = async () => {
              const { data } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "${{ github.sha }}",
              });

              checksCompleted = data.check_runs.every((check) => check.status === "completed");

              if (!checksCompleted) {
                console.log("Checks are still running...");
                setTimeout(checkStatus, interval);
              } else {
                console.log("All checks have completed successfully.");
                github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                });
              }
            };

            checkStatus();
